{"version":3,"sources":["../../server/controllers/eventController.js"],"names":["events","event","centers","center","reqBody","req","body","name","date","time","centerId","image","description","userId","decoded","id","Event","res","now","Date","eventDate","status","json","message","query","where","$and","find","then","create","newEvent","catch","error","errMessages","type","eventId","params","findById","send","destroy","include","model","as","findAll","update","modifiedEvent"],"mappings":"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","file":"eventController.js","sourcesContent":["import db from '../models';\nimport errorMessages from '../utils/handleErrors';\n\nconst events = db.event;\nconst centers = db.center;\nconst reqBody = (req) => {\n  const {\n    name, date, time, centerId, image, description\n  } = req.body;\n  const { id: userId } = req.decoded;\n\n  return {\n    name, date, time, centerId, image, description, userId\n  };\n};\n/**\n * handles all center-based routes\n */\nexport default class Event {\n  /**\n    * add new event into the database\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json of newly created event\n    *@memberof Event\n    */\n  static addEvent(req, res) {\n    const now = new Date();\n    const eventDate = req.body.date;\n    const date = new Date(eventDate);\n    if (date && date < now) {\n      return res.status(400).json({ message: 'Date is past, Please choose a future date' });\n    }\n    const query = {\n      where: {\n        $and: [\n          { date: req.body.date },\n          { centerId: req.body.centerId }\n        ]\n      }\n    };\n    events.find(query)\n      .then((event) => {\n        if (event) {\n          return res.status(409).json({ message: `center has already being booked for ${req.body.date}, kindly book another date` });\n        }\n        return events.create(reqBody(req))\n          .then(newEvent => res.status(201).json({ message: 'Event Created!', event: newEvent }))\n          .catch((error) => {\n            const errMessages = errorMessages(error);\n            switch (errMessages.type) {\n            case 'uniqueError':\n              res.status(409).json({ message: errMessages.error });\n              break;\n            case 'validationError':\n              res.status(400).json({ message: errMessages.error });\n              break;\n            default:\n              res.status(501).json({ message: errMessages.error });\n            }\n          });\n      });\n    // .catch(() => res.status(400).json({ error: 'Kindly fill the required fields' }));\n    // });\n  }\n  /**\n   * deletes one event\n   *@static\n   *@param {object} req express request object\n   *@param {object} res express response object\n   *@returns {void}\n   *@memberof Event\n   */\n  static deleteEvent(req, res) {\n    const { eventId } = req.params;\n    return events\n      .findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(404).send({ error: 'Event Not Found!' });\n        }\n        return event\n          .destroy()\n          .then(res.status(200).json({ error: 'Event Successfully Deleted!', eventId }));\n      });\n  }\n\n  /**\n   * get one event\n   *@static\n   *@param {object} req express request object\n   *@param {object} res express response object\n   *@returns {void}\n   *@memberof Event\n   */\n  static getOneEvent(req, res) {\n    return events\n      .findById(req.params.eventId, {\n        include: [{\n          model: centers,\n          as: 'center'\n        }],\n      })\n      .then((event) => {\n        if (!event) {\n          return res.status(400).send({ message: 'Event Not Found!' });\n        }\n        return event\n          .then(res.status(200).json({ message: 'Event Found!' }));\n      });\n  }\n  /**\n  /**\n    * get all events in the database\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json of all events\n    *@memberof Event\n    */\n  static getAllEvents(req, res) {\n    return events\n      .findAll({\n        where: {\n          userId: req.decoded.id\n        },\n        include: [{\n          model: centers,\n        }],\n      })\n      .then(event => res.status(200).json({ message: 'Events Founded!', event }))\n      .catch(error => res.status(500).json({ message: error.message }));\n  }\n\n  /**\n    *edit event\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json with modified event\n    *@memberof event\n    */\n  static modifyEvent(req, res) {\n    return events\n    // finding event whose Id matches the eventId supplied\n      .findById(req.params.eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(404).send({\n            message: 'Event Not Found!',\n          });\n        }\n        return event\n        /* updating events details */\n          .update(reqBody(req))\n          // Send back the updated event too.\n          .then(modifiedEvent => res.status(200).json({\n            message: 'Event Update Successful', modifiedEvent,\n          }))\n          .catch((error) => {\n            const errMessages = errorMessages(error);\n            if (error.name === 'SequelizeValidationError'\n            &&\n            errMessages.type === 'validationError') {\n              res.status(400).json({ message: errMessages.error });\n            } else {\n              res.status(501).json({ message: errMessages.error });\n            }\n          });\n      });\n  }\n}\n"]}