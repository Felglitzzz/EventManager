{"version":3,"sources":["../../server/controllers/centerController.js"],"names":["centers","center","events","event","reqBody","req","body","name","location","capacity","facilities","type","image","description","price","userId","decoded","id","Center","res","create","then","status","json","message","catch","error","errors","findById","params","centerId","send","update","modifiedCenter","include","model","as","all","Centers"],"mappings":"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","file":"centerController.js","sourcesContent":["import db from '../models';\n\n/**\n * controller to handle all center based routes\n */\nconst centers = db.center;\nconst events = db.event;\n\nconst reqBody = (req) => {\n  const {\n    name, location, capacity, facilities, type, image, description, price\n  } = req.body;\n  const { id: userId } = req.decoded;\n\n  return {\n    name, location, capacity, facilities, type, image, description, userId, price\n  };\n};\n/**\n * @class center\n */\nexport default class Center {\n  /**\n    * add new center into the database\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json of newly created center\n    *@memberof Center\n    */\n  static addCenter(req, res) {\n    return centers\n      .create(reqBody(req))\n      .then(center => res.status(201).json({ message: 'Center created!', Center: center }))\n      // .catch((error) => {\n      //   const errMessages = errorMessages(error);\n      //   switch (errMessages.type) {\n      //     case 'uniqueError':\n      //       res.status(409).json({ error: errMessages.error });\n      //       break;\n      //     case 'validationError':\n      //       res.status(400).json({ error: errMessages.error });\n      //       break;\n      //     default:\n      //       res.status(501).json({ error: errMessages.error });\n      //   }\n      // });\n      .catch(error => res.status(400).json({ message: error.errors[0].message }));\n  }\n\n  /**\n    *edit center\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json with modified center\n    *@memberof Center\n    */\n  static modifyCenter(req, res) {\n    // const {\n    //   name, location, capacity, price, facilities, type, dateBooked,\n    // } = req.body;\n    return centers\n    // finding center whose Id matches the centerId supplied\n      .findById(req.params.centerId)\n      .then((center) => {\n        if (!center) {\n          return res.status(404).send({\n            message: 'Center Not Found!',\n          });\n        }\n        return center\n        /* updating centers details\n        if no details inputed, defaults to the details the center already have */\n          .update(reqBody(req))\n        // Send back the updated center too.\n          .then(modifiedCenter => res.status(200).json({\n            message: 'Center Update Successful', modifiedCenter,\n          }))\n          .catch(error => res.status(400).json({ message: error.message }));\n      });\n  }\n  /**\n    * get one center\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json with one center\n    *@memberof Center\n    */\n  static getOneCenter(req, res) {\n    return centers\n      .findById(req.params.centerId, {\n        include: [{\n          model: events,\n          as: 'events',\n        }],\n      })\n      .then((center) => {\n        if (!center) {\n          return res.status(404).send({\n            message: 'Center Not Found!',\n          });\n        }\n        return res.status(200).json({\n          message: 'Center Found',\n          center,\n        });\n      })\n      .catch(() => res.status(500).json({\n        message: 'Some error occured',\n      }));\n  }\n  /**\n    *get all centers\n    *@static\n    *@param {object} req express request object\n    *@param {object} res express response object\n    *@returns {json} json with all centers\n    *@memberof Center\n    */\n  static getAllCenters(req, res) {\n    return centers\n      .all()\n      .then(center => res.status(200).json({\n        message: 'Centers found!', Centers: center,\n      }))\n      .catch(error => res.status(500).json(error));\n  }\n  // /**\n  //  * deletes one center\n  //  *@static\n  //  *@param {object} req express request object\n  //  *@param {object} res express response object\n  //  *@returns {void}\n  //  *@memberof Center\n  //  */\n\n  // static deleteCenter(req, res) {\n  //   return centers\n  //     .findById(req.params.id)\n  //     .then((center) => {\n  //       if (!center) {\n  //         return res\n  //           .status(400)\n  //           .send({ message: 'center not Found' });\n  //       }\n  //       return center\n  //         .destroy()\n  //         .then(res.status(200).send({ message: 'center successfully deleted!' }))\n  //         .catch(error => res.status(409).send(error));\n  //     });\n  // }\n}\n"]}