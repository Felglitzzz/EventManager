{"version":3,"sources":["../../server/controllers/userController.js"],"names":["require","config","users","user","User","req","res","create","surname","body","firstname","username","email","password","isAdmin","then","userData","id","token","generateToken","status","json","message","userId","catch","error","errMessages","type","findOne","where","compareSync","findById","decoded","send"],"mappings":"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","file":"userController.js","sourcesContent":["// import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\n\nimport db from '../models';\nimport errorMessages from '../utils/handleErrors';\nimport Helper from '../utils/helper';\n\nrequire('dotenv').config();\n\nconst users = db.user;\n// const secret = process.env.SECRET;\n\n/**\n * This method handles all user based routes\n */\nexport default class User {\n  /**\n   * @static\n   * @param {object} req object\n   * @param {object} res object\n   *\n   * @returns {object} created User object\n   */\n  static createUser(req, res) {\n    // const { username } = req.body;\n    // const query = {\n    //   where: {\n    //     $and: [\n    //       { username }\n    //     ]\n    //   }\n    // };\n    // users.find(query).then((foundUser) => {\n    //   if (foundUser) {\n    //     return res.status(409).json({ message: `username ${username} is already taken` });\n    //   }\n    users\n      .create({\n        surname: req.body.surname,\n        firstname: req.body.firstname,\n        username: req.body.username,\n        email: req.body.email,\n        password: req.body.password,\n        isAdmin: req.body.isAdmin\n      })\n      .then((user) => {\n        const userData = {\n          id: user.id,\n        };\n        const token = Helper.generateToken(userData);\n        res.status(201).json({\n          message: 'User created',\n          token,\n          user: {\n            userId: user.id,\n            username: user.username,\n            isAdmin: user.isAdmin\n          }\n        });\n      })\n      .catch((error) => {\n        const errMessages = errorMessages(error);\n        if (errMessages.type === 'validationError') {\n          return res.status(400).json({ error: errMessages.error });\n        }\n        if (errMessages.type === 'uniqueError') {\n          return res.status(409).json({ error: errMessages.error });\n        }\n        return res.status(500).json({ error: 'Internal Server Error' });\n      });\n  }\n  /**\n   * login\n   *\n   * @param {object} req object\n   * @param {object} res object\n   *\n   * @returns {json} logged in user object\n   */\n  static login(req, res) {\n    const { username, password } = req.body;\n\n    return users.findOne({ where: { username } })\n      .then((user) => {\n        if (user && bcrypt.compareSync(password, user.password)) {\n          const userData = {\n            id: user.id,\n            username: user.username,\n            isAdmin: user.isAdmin\n          };\n          const token = Helper.generateToken(userData);\n          return res.status(200).json({\n            message: 'User logged in',\n            token,\n          });\n        }\n        return res.status(401).json({ error: 'Username/Password Incorrect' });\n      })\n      .catch((error) => {\n        const errMessages = errorMessages(error);\n        switch (errMessages.type) {\n        case 'validationError':\n          res.status(400).json({ error: errMessages.error });\n          break;\n        default:\n          res.status(501).json({ error: errMessages.error });\n        }\n      });\n  }\n\n  /**\n   * get one user\n   *@static\n\n   *@param {object} req express request object\n   *@param {object} res express response object\n\n   *@returns {object} retrieved user object\n   */\n  static getOneUser(req, res) {\n    return users\n      .findById(req.decoded.id)\n      .then((user) => {\n        if (!user) {\n          return res.status(400).send({ message: 'User Not Found!' });\n        }\n        return user\n          .then(res.status(200).json({ message: 'User Found!', user }));\n      })\n      .catch(() => res.status(400).send({ message: 'User Not Found!' }));\n  }\n}\n"]}