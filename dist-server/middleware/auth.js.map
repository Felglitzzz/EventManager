{"version":3,"sources":["../../server/middleware/auth.js"],"names":["userModel","user","require","config","Auth","req","res","next","authorization","headers","status","json","error","decodeToken","then","decoded","findOne","where","id","message","catch","err","name","essage","isAdmin"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAGA,IAAMA,YAAY,iBAAOC,IAAzB;AACA;;AAEAC,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;;;;IAGqBC,I;;;;;;;;AACrB;;;;;;;;;+BASoBC,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UACxBC,aADwB,GACNH,IAAII,OADE,CACxBD,aADwB;;AAEhC,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gDAAT,EAArB,CAAP;AACD;AACD,uBAAOC,WAAP,CAAmBL,aAAnB,EACGM,IADH,CACQ,UAACC,OAAD,EAAa;AACjB,YAAI,CAACA,OAAL,EAAc;AACZ,iBAAOT,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,oDAAT,EAArB,CAAP;AACD;AACDZ,kBAAUgB,OAAV,CAAkB,EAAEC,OAAO,EAAEC,IAAIH,QAAQG,EAAd,EAAT,EAAlB,EACGJ,IADH,CACQ,UAACb,IAAD,EAAU;AACd,cAAI,CAACA,IAAL,EAAW;AAAE,mBAAOK,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,SAAS,gBAAX,EAArB,CAAP;AAA6D;AAC1Ed,cAAIU,OAAJ,GAAcA,OAAd;AACA,iBAAOR,MAAP;AACD,SALH,EAMGa,KANH,CAMS;AAAA,iBAAMd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,SAAS,gBAAX,EAArB,CAAN;AAAA,SANT;AAOD,OAZH,EAaGC,KAbH,CAaS,UAACC,GAAD,EAAS;AAAA,YACNC,IADM,GACYD,GADZ,CACNC,IADM;AAAA,YACAH,OADA,GACYE,GADZ,CACAF,OADA;;AAEd,YAAIG,SAAS,mBAAb,EAAkC;AAChC,iBAAOhB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,gBAAF,EAAWE,KAAK,gBAAhB,EAArB,CAAP;AACD;AACD,YAAIC,SAAS,mBAAb,EAAkC;AAChC,iBAAOhB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,QAAQ,kBAAV,EAArB,CAAP;AACD;AACD,eAAOjB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEU,QAAF,EAArB,CAAP;AACD,OAtBH;AAuBD;;AAED;;;;;;;;;;;;qCAUwBhB,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAC9BC,aAD8B,GACZH,IAAII,OADQ,CAC9BD,aAD8B;;AAEtC,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BQ,mBAAS;AADiB,SAArB,CAAP;AAGD;AACD,uBAAON,WAAP,CAAmBL,aAAnB,EACGM,IADH,CACQ,UAACC,OAAD,EAAa;AACjB,YAAI,CAACA,OAAL,EAAc;AACZ,iBAAOT,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BQ,qBAAS;AADiB,WAArB,CAAP;AAGD;AACD,YAAI,CAACJ,QAAQS,OAAb,EAAsB;AACpB,iBAAOlB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BQ,qBAAS;AADiB,WAArB,CAAP;AAGD;AACDd,YAAIU,OAAJ,GAAcA,OAAd;AACA,eAAOR,MAAP;AACD,OAdH;AAeD;;;;;;kBAxEkBH,I","file":"auth.js","sourcesContent":["import models from '../models';\nimport Helper from '../utils/helper';\n\n\nconst userModel = models.user;\n// const secret = process.env.SECRET;\n\nrequire('dotenv').config();\n\n/**\n * Ensures all routes are protected\n */\nexport default class Auth {\n/**\n   * This methods verifies if a user is a regular user\n   *\n   * @param {object} req express request object\n   * @param {object} res express response object\n   * @param {next} next runs the next function\n   *\n   * @returns {object} validation error message or passes control to the next item\n  */\n  static verifyUser(req, res, next) {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      return res.status(401).json({ error: 'You do not have permission to access this page' });\n    }\n    Helper.decodeToken(authorization)\n      .then((decoded) => {\n        if (!decoded) {\n          return res.status(403).json({ error: 'You do not have the permission to access this page' });\n        }\n        userModel.findOne({ where: { id: decoded.id } })\n          .then((user) => {\n            if (!user) { return res.status(404).json({ message: 'User not found' }); }\n            req.decoded = decoded;\n            return next();\n          })\n          .catch(() => res.status(404).json({ message: 'User not found' }));\n      })\n      .catch((err) => {\n        const { name, message } = err;\n        if (name === 'JsonWebTokenError') {\n          return res.status(401).json({ message, err: 'Invalid Token!' });\n        }\n        if (name === 'TokenExpiredError') {\n          return res.status(401).json({ essage: 'Session Expired!' });\n        }\n        return res.status(403).json({ err });\n      });\n  }\n\n  /**\n   * This method verifies if a user is an admin\n   *\n   * @param {object} req express request object\n   * @param {object} res express response object\n   * @param {next} next runs the next function\n   *\n   * @returns {object} validation error message or passes control to the next item\n\n   */\n  static checkAdminStatus(req, res, next) {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      return res.status(403).json({\n        message: 'You do not have the permission to access this page!'\n      });\n    }\n    Helper.decodeToken(authorization)\n      .then((decoded) => {\n        if (!decoded) {\n          return res.status(403).json({\n            message: 'Authentication failed, Token is Invalid or expired'\n          });\n        }\n        if (!decoded.isAdmin) {\n          return res.status(403).json({\n            message: 'You do not have the permission to access this page!'\n          });\n        }\n        req.decoded = decoded;\n        return next();\n      });\n  }\n}\n\n"]}