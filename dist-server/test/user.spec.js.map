{"version":3,"sources":["../../server/test/user.spec.js"],"names":["use","request","describe","before","done","user","sync","force","then","create","admin","signup","it","post","send","validLogin","end","err","res","body","message","token","to","have","status","equal","length","above","inValidLogin","noUsername","errors","username","noPassword","password","invalidUsername","error","invalidPassword","validUser","property","invalidSignupData","emailExist","usernameExist","noSurname","surname","invalidSurname","invalidSurnameLen","noFirstname","firstname","invalidFirstname","invalidFirstnameLen","noEmail","email","invalidEmail","invalidUsernameLen","invalidPasswordLen","invalidpasswordConfirm","login","invalidLoginData"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAKA,GAAL;AACA,IAAMC,UAAU,eAAKA,OAAL,iBAAhB;;AAEAC,SAAS,iBAAT,EAA4B,YAAM;AAChC;AACAC,SAAO,UAACC,IAAD,EAAU;AACf,qBAAGC,IAAH,CAAQC,IAAR,CAAa,EAAEC,OAAO,IAAT,EAAb,EACGC,IADH,CACQ;AAAA,aAAMJ,MAAN;AAAA,KADR;AAED,GAHD;;AAKAD,SAAO,UAACC,IAAD,EAAU;AACf,qBAAGC,IAAH,CAAQI,MAAR,CAAe,uBAASC,KAAT,CAAeC,MAA9B,EACGH,IADH,CACQ;AAAA,aAAMJ,MAAN;AAAA,KADR;AAED,GAHD;;AAKAF,WAAS,YAAT,EAAuB,YAAM;AAC3BU,OAAG,uDAAH,EAA4D,UAACR,IAAD,EAAU;AACpEH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASJ,KAAT,CAAeK,UAFvB,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,wBACUA,IAAIC,IADd;AAAA,YACTC,OADS,aACTA,OADS;AAAA,YACAC,KADA,aACAA,KADA;;AAEjB,0BAAOH,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOJ,OAAP,EAAgBE,EAAhB,CAAmBG,KAAnB,CAAyB,gBAAzB;AACA,0BAAOJ,KAAP,EAAcC,EAAd,CAAiBC,IAAjB,CAAsBG,MAAtB,CAA6BC,KAA7B,CAAmC,CAAnC;AACAvB;AACD,OATH;AAUD,KAXD;AAYAQ,OAAG,iEAAH,EAAsE,UAACR,IAAD,EAAU;AAC9EH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASJ,KAAT,CAAekB,YAAf,CAA4BC,UAFpC,EAGGb,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOC,QAAd,EAAwBT,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,uEAAH,EAA4E,UAACR,IAAD,EAAU;AACpFH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASJ,KAAT,CAAekB,YAAf,CAA4BI,UAFpC,EAGGhB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOG,QAAd,EAAwBX,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;AAWAQ,OAAG,uDAAH,EAA4D,UAACR,IAAD,EAAU;AACpEH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASJ,KAAT,CAAekB,YAAf,CAA4BM,eAFpC,EAGGlB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTiB,KADS,GACCjB,IAAIC,IADL,CACTgB,KADS;;AAEjB,0BAAOjB,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOW,KAAP,EAAcb,EAAd,CAAiBG,KAAjB,CAAuB,6BAAvB;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,uDAAH,EAA4D,UAACR,IAAD,EAAU;AACpEH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASJ,KAAT,CAAekB,YAAf,CAA4BQ,eAFpC,EAGGpB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTiB,KADS,GACCjB,IAAIC,IADL,CACTgB,KADS;;AAEjB,0BAAOjB,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOW,KAAP,EAAcb,EAAd,CAAiBG,KAAjB,CAAuB,6BAAvB;AACArB;AACD,OARH;AASD,KAVD;AAWD,GA3DD;;AA6DAF,WAAS,WAAT,EAAsB,YAAM;AAC1BU,OAAG,kDAAH,EAAuD,UAACR,IAAD,EAAU;AAC/DH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASuB,SAAT,CAAmB1B,MAF3B,EAGGK,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,yBACUA,IAAIC,IADd;AAAA,YACTC,OADS,cACTA,OADS;AAAA,YACAC,KADA,cACAA,KADA;;AAEjB,0BAAOH,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAON,IAAIC,IAAX,EAAiBG,EAAjB,CAAoBC,IAApB,CAAyBe,QAAzB,CAAkC,SAAlC;AACA,0BAAOlB,OAAP,EAAgBE,EAAhB,CAAmBG,KAAnB,CAAyB,cAAzB;AACA,0BAAOJ,KAAP,EAAcC,EAAd,CAAiBC,IAAjB,CAAsBG,MAAtB,CAA6BC,KAA7B,CAAmC,CAAnC;AACAvB;AACD,OAVH;AAWD,KAZD;;AAcAQ,OAAG,+DAAH,EAAoE,UAACR,IAAD,EAAU;AAC5EH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BC,UAFnC,EAGGxB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTiB,KADS,GACCjB,IAAIC,IADL,CACTgB,KADS;;AAEjB,0BAAOjB,IAAIM,MAAX,EAAmBF,EAAnB,CAAsBG,KAAtB,CAA4B,GAA5B;AACA,0BAAOP,IAAIC,IAAX,EAAiBG,EAAjB,CAAoBC,IAApB,CAAyBe,QAAzB,CAAkC,OAAlC;AACA,0BAAOH,KAAP,EAAcb,EAAd,CAAiBG,KAAjB,CAAuB,+BAAvB;AACArB;AACD,OATH;AAUD,KAXD;;AAaAQ,OAAG,kEAAH,EAAuE,UAACR,IAAD,EAAU;AAC/EH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BE,aAFnC,EAGGzB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTiB,KADS,GACCjB,IAAIC,IADL,CACTgB,KADS;;AAEjB,0BAAOjB,IAAIM,MAAX,EAAmBF,EAAnB,CAAsBG,KAAtB,CAA4B,GAA5B;AACA,0BAAOP,IAAIC,IAAX,EAAiBG,EAAjB,CAAoBC,IAApB,CAAyBe,QAAzB,CAAkC,OAAlC;AACA,0BAAOH,KAAP,EAAcb,EAAd,CAAiBG,KAAjB,CAAuB,oCAAvB;AACArB;AACD,OATH;AAUD,KAXD;;AAaAQ,OAAG,kEAAH,EAAuE,UAACR,IAAD,EAAU;AAC/EH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BG,SAFnC,EAGG1B,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOa,OAAd,EAAuBrB,EAAvB,CAA0BG,KAA1B,CAAgC,qBAAhC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,kEAAH,EAAuE,UAACR,IAAD,EAAU;AAC/EH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BK,cAFnC,EAGG5B,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOa,OAAd,EAAuBrB,EAAvB,CAA0BG,KAA1B,CAAgC,kCAAhC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,gFAAH,EAAqF,UAACR,IAAD,EAAU;AAC7FH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BM,iBAFnC,EAGG7B,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOa,OAAd,EAAuBrB,EAAvB,CAA0BG,KAA1B,CAAgC,4CAAhC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,oEAAH,EAAyE,UAACR,IAAD,EAAU;AACjFH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BO,WAFnC,EAGG9B,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOiB,SAAd,EAAyBzB,EAAzB,CAA4BG,KAA5B,CAAkC,uBAAlC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,oEAAH,EAAyE,UAACR,IAAD,EAAU;AACjFH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BS,gBAFnC,EAGGhC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOiB,SAAd,EAAyBzB,EAAzB,CAA4BG,KAA5B,CAAkC,oCAAlC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,kFAAH,EAAuF,UAACR,IAAD,EAAU;AAC/FH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BU,mBAFnC,EAGGjC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOiB,SAAd,EAAyBzB,EAAzB,CAA4BG,KAA5B,CAAkC,8CAAlC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,gEAAH,EAAqE,UAACR,IAAD,EAAU;AAC7EH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BW,OAFnC,EAGGlC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOqB,KAAd,EAAqB7B,EAArB,CAAwBG,KAAxB,CAA8B,mBAA9B;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,0DAAH,EAA+D,UAACR,IAAD,EAAU;AACvEH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2Ba,YAFnC,EAGGpC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOqB,KAAd,EAAqB7B,EAArB,CAAwBG,KAAxB,CAA8B,2DAA9B;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,mEAAH,EAAwE,UAACR,IAAD,EAAU;AAChFH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BV,UAFnC,EAGGb,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOC,QAAd,EAAwBT,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,iFAAH,EAAsF,UAACR,IAAD,EAAU;AAC9FH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2Bc,kBAFnC,EAGGrC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOC,QAAd,EAAwBT,EAAxB,CAA2BG,KAA3B,CAAiC,6CAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,mEAAH,EAAwE,UAACR,IAAD,EAAU;AAChFH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BP,UAFnC,EAGGhB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOG,QAAd,EAAwBX,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,iFAAH,EAAsF,UAACR,IAAD,EAAU;AAC9FH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2Be,kBAFnC,EAGGtC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOG,QAAd,EAAwBX,EAAxB,CAA2BG,KAA3B,CAAiC,8CAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,2DAAH,EAAgE,UAACR,IAAD,EAAU;AACxEH,cACGY,IADH,CACQ,eADR,EAEGC,IAFH,CAEQ,uBAASyB,iBAAT,CAA2BgB,sBAFnC,EAGGvC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOG,QAAd,EAAwBX,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,iDAAH,EAAsD,UAACR,IAAD,EAAU;AAC9DH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAASuB,SAAT,CAAmBmB,KAF3B,EAGGxC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,yBACUA,IAAIC,IADd;AAAA,YACTC,OADS,cACTA,OADS;AAAA,YACAC,KADA,cACAA,KADA;;AAEjB,0BAAOH,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOJ,OAAP,EAAgBE,EAAhB,CAAmBG,KAAnB,CAAyB,gBAAzB;AACA,0BAAOJ,KAAP,EAAcC,EAAd,CAAiBC,IAAjB,CAAsBG,MAAtB,CAA6BC,KAA7B,CAAmC,CAAnC;AACAvB;AACD,OATH;AAUD,KAXD;;AAaAQ,OAAG,mDAAH,EAAwD,UAACR,IAAD,EAAU;AAChEH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAAS2C,gBAAT,CAA0B5B,UAFlC,EAGGb,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOC,QAAd,EAAwBT,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;;AAYAQ,OAAG,mDAAH,EAAwD,UAACR,IAAD,EAAU;AAChEH,cACGY,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,uBAAS2C,gBAAT,CAA0BzB,UAFlC,EAGGhB,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,YACTY,MADS,GACEZ,IAAIC,IADN,CACTW,MADS;;AAEjB,0BAAOZ,GAAP,EAAYI,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,0BAAOM,OAAOG,QAAd,EAAwBX,EAAxB,CAA2BG,KAA3B,CAAiC,sBAAjC;AACArB;AACD,OARH;AASD,KAVD;AAWD,GAzOD;AA0OD,CAnTD","file":"user.spec.js","sourcesContent":["import chai, { expect } from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../index';\nimport db from '../models';\nimport mockData from './helpers/userMockData';\n\nchai.use(chaiHttp);\nconst request = chai.request(app);\n\ndescribe('UserAccess Test', () => {\n  // teardown and setup database\n  before((done) => {\n    db.user.sync({ force: true })\n      .then(() => done());\n  });\n\n  before((done) => {\n    db.user.create(mockData.admin.signup)\n      .then(() => done());\n  });\n\n  describe('Admin test', () => {\n    it('expect admin user to be able to login with valid data', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.admin.validLogin)\n        .end((err, res) => {\n          const { message, token } = res.body;\n          expect(res).to.have.status(200);\n          expect(message).to.equal('User logged in');\n          expect(token).to.have.length.above(0);\n          done();\n        });\n    });\n    it('expect to return 400 if the username field is missing for login', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.admin.inValidLogin.noUsername)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.username).to.equal('Username is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the password field is missing for admin login', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.admin.inValidLogin.noPassword)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.password).to.equal('Password is Required');\n          done();\n        });\n    });\n    it('should not login for admin with an incorrect username', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.admin.inValidLogin.invalidUsername)\n        .end((err, res) => {\n          const { error } = res.body;\n          expect(res).to.have.status(401);\n          expect(error).to.equal('Username/Password Incorrect');\n          done();\n        });\n    });\n\n    it('should not login for admin with an incorrect password', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.admin.inValidLogin.invalidPassword)\n        .end((err, res) => {\n          const { error } = res.body;\n          expect(res).to.have.status(401);\n          expect(error).to.equal('Username/Password Incorrect');\n          done();\n        });\n    });\n  });\n\n  describe('User test', () => {\n    it('expect user to be able to signup with valid data', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.validUser.signup)\n        .end((err, res) => {\n          const { message, token } = res.body;\n          expect(res).to.have.status(201);\n          expect(res.body).to.have.property('message');\n          expect(message).to.equal('User created');\n          expect(token).to.have.length.above(0);\n          done();\n        });\n    });\n\n    it('Should not register a new user with an already existing email', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.emailExist)\n        .end((err, res) => {\n          const { error } = res.body;\n          expect(res.status).to.equal(409);\n          expect(res.body).to.have.property('error');\n          expect(error).to.equal('A user with this email exists');\n          done();\n        });\n    });\n\n    it('Should not register a new user with an already existing username', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.usernameExist)\n        .end((err, res) => {\n          const { error } = res.body;\n          expect(res.status).to.equal(409);\n          expect(res.body).to.have.property('error');\n          expect(error).to.equal('Username taken, Please use another');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the surname field is missing for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.noSurname)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.surname).to.equal('Surname is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the surname field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidSurname)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.surname).to.equal('Surname can only contain letters');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the length of the surname field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidSurnameLen)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.surname).to.equal('Surname should be more than two characters');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the firstname field is missing for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.noFirstname)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.firstname).to.equal('Firstname is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the firstname field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidFirstname)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.firstname).to.equal('Firstname can only contain letters');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the length of the firstname field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidFirstnameLen)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.firstname).to.equal('Firstname should be more than two characters');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the email field is missing for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.noEmail)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.email).to.equal('Email is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the email is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidEmail)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.email).to.equal('Invalid email, Enter a valid email, like so: you@mail.com');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the username field is missing for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.noUsername)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.username).to.equal('Username is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the length of the username field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidUsernameLen)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.username).to.equal('Username should be more than two characters');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the password field is missing for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.noPassword)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.password).to.equal('Password is Required');\n          done();\n        });\n    });\n\n    it('expect to return 400 if the length of the password field is invalid for sign up', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidPasswordLen)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.password).to.equal('Password should not be less than 8 characers');\n          done();\n        });\n    });\n\n    it('expect to return 400 if confirm password field is missing', (done) => {\n      request\n        .post('/api/v1/users')\n        .send(mockData.invalidSignupData.invalidpasswordConfirm)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.password).to.equal('Passwords must match');\n          done();\n        });\n    });\n\n    it('expect user to be able to login with valid data', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.validUser.login)\n        .end((err, res) => {\n          const { message, token } = res.body;\n          expect(res).to.have.status(200);\n          expect(message).to.equal('User logged in');\n          expect(token).to.have.length.above(0);\n          done();\n        });\n    });\n\n    it('should not login if the username field is missing', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.invalidLoginData.noUsername)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.username).to.equal('Username is Required');\n          done();\n        });\n    });\n\n    it('should not login if the password field is missing', (done) => {\n      request\n        .post('/api/v1/users/login')\n        .send(mockData.invalidLoginData.noPassword)\n        .end((err, res) => {\n          const { errors } = res.body;\n          expect(res).to.have.status(400);\n          expect(errors.password).to.equal('Password is Required');\n          done();\n        });\n    });\n  });\n});\n"]}