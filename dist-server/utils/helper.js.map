{"version":3,"sources":["../../server/utils/helper.js"],"names":["require","config","Helper","token","Promise","resolve","reject","verify","process","env","SECRET","err","decoded","user","sign","expiresIn"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;;;;IAGqBC,M;;;;;;;;AACnB;;;;;;;gCAOmBC,K,EAAO;AACxB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,+BAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQC,GAAR,CAAYC,MAA9B,EAAsC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACtD,cAAIA,OAAJ,EAAa;AACXP,oBAAQO,OAAR;AACD,WAFD,MAEO;AACLN,mBAAOK,GAAP;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;AACD;;;;;;;;;;;;;kCAUqBE,I,EAAM;AACzB,UAAMV,QAAQ,uBAAIW,IAAJ,CAASD,IAAT,EAAeL,QAAQC,GAAR,CAAYC,MAA3B,EAAmC,EAAEK,WAAW,KAAb,EAAnC,CAAd;AACA,aAAOZ,KAAP;AACD;;;;;;kBAhCkBD,M","file":"helper.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\nrequire('dotenv').config();\n\n/**\n * creates an Helper class which is used as a middleware\n */\nexport default class Helper {\n  /**\n     * Decodes a token\n     *\n     * @param {object} token\n     *\n     * @returns {object} decoded token\n     */\n  static decodeToken(token) {\n    return new Promise((resolve, reject) => {\n      jwt.verify(token, process.env.SECRET, (err, decoded) => {\n        if (decoded) {\n          resolve(decoded);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Generates a token\n   *\n   * @static\n   *\n   * @param {object} user\n   *\n   * @returns {string} generated token\n   * @memberof Helper\n   */\n  static generateToken(user) {\n    const token = jwt.sign(user, process.env.SECRET, { expiresIn: '24h' });\n    return token;\n  }\n}\n\n"]}