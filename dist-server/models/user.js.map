{"version":3,"sources":["../../server/models/user.js"],"names":["userModel","sequelize","DataTypes","user","define","surname","type","STRING","allowNull","validate","notEmpty","args","msg","is","len","firstname","username","unique","email","isEmail","password","isAdmin","BOOLEAN","defaultValue","hooks","beforeCreate","userData","hashSync","associate","models","hasMany","event","foreignKey","onDelete"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AAC1C,MAAMC,OAAOF,UAAUG,MAAV,CACX,MADW,EACH;AACNC,aAAS;AACPC,YAAMJ,UAAUK,MADT;AAEPC,iBAAW,KAFJ;AAGPC,gBAAU;AACRC,kBAAU;AACRC,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRC,YAAI;AACFF,gBAAM,CAAC,UAAD,EAAa,GAAb,CADJ;AAEFC,eAAK;AAFH,SALI;AASRE,aAAK;AACHH,gBAAM,CAAC,CAAD,EAAI,EAAJ,CADH;AAEHC,eAAK;AAFF;AATG;AAHH,KADH;AAmBNG,eAAW;AACTT,YAAMJ,UAAUK,MADP;AAETC,iBAAW,KAFF;AAGTC,gBAAU;AACRC,kBAAU;AACRC,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRC,YAAI;AACFF,gBAAM,CAAC,UAAD,EAAa,GAAb,CADJ;AAEFC,eAAK;AAFH,SALI;AASRE,aAAK;AACHH,gBAAM,CAAC,CAAD,EAAI,EAAJ,CADH;AAEHC,eAAK;AAFF;AATG;AAHD,KAnBL;AAqCNI,cAAU;AACRV,YAAMJ,UAAUK,MADR;AAERC,iBAAW,KAFH;AAGRS,cAAQ;AACNN,cAAM,IADA;AAENC,aAAK;AAFC,OAHA;AAORH,gBAAU;AACRC,kBAAU;AACRC,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRC,YAAI,CAAC,gBAAD,CALI;AAMRC,aAAK;AACHH,gBAAM,CAAC,CAAD,CADH;AAEHC,eAAK;AAFF;AANG;AAPF,KArCJ;AAwDNM,WAAO;AACLZ,YAAMJ,UAAUK,MADX;AAELC,iBAAW,KAFN;AAGLS,cAAQ;AACNN,cAAM,IADA;AAENC,aAAK;AAFC,OAHH;AAOLH,gBAAU;AACRC,kBAAU;AACRC,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRO,iBAAS;AACPP,eAAK;AADE;AALD;AAPL,KAxDD;AAyENQ,cAAU;AACRd,YAAMJ,UAAUK,MADR;AAERC,iBAAW,KAFH;AAGRC,gBAAU;AACRC,kBAAU;AACRC,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRE,aAAK;AACHH,gBAAM,CAAC,CAAD,CADH;AAEHC,eAAK;AAFF;AALG;AAHF,KAzEJ;AAuFNS,aAAS;AACPf,YAAMJ,UAAUoB,OADT;AAEPd,iBAAW,IAFJ;AAGPe,oBAAc;AAHP;AAvFH,GADG,EA8FX;AACEC,WAAO;AACLC,oBAAc,sBAACC,QAAD,EAAc;AAC1BA,iBAASN,QAAT,GAAoB,iBAAOO,QAAP,CAAgBD,SAASN,QAAzB,EAAmC,EAAnC,CAApB;AACD;AAHI;AADT,GA9FW,CAAb;AAsGAjB,OAAKyB,SAAL,GAAiB,UAACC,MAAD,EAAY;AAC3B1B,SAAK2B,OAAL,CAAaD,OAAOE,KAApB,EAA2B;AACzBC,kBAAY,QADa;AAEzBC,gBAAU;AAFe,KAA3B;AAID,GALD;AAMA,SAAO9B,IAAP;AACD,CA9GD;;kBAgHeH,S","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt';\n\nconst userModel = (sequelize, DataTypes) => {\n  const user = sequelize.define(\n    'user', {\n      surname: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: {\n            args: true,\n            msg: 'Surname cannot be empty',\n          },\n          is: {\n            args: ['^[a-z]+$', 'i'],\n            msg: 'Surname can only contain letters',\n          },\n          len: {\n            args: [3, 30],\n            msg: 'Surname should be more than two characters',\n          }\n        }\n      },\n      firstname: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: {\n            args: true,\n            msg: 'Firstname cannot be empty',\n          },\n          is: {\n            args: ['^[a-z]+$', 'i'],\n            msg: 'Firstname can only contain letters',\n          },\n          len: {\n            args: [3, 30],\n            msg: 'Firstname should be more than two characters',\n          }\n        }\n      },\n      username: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: {\n          args: true,\n          msg: 'Username taken, Please use another',\n        },\n        validate: {\n          notEmpty: {\n            args: true,\n            msg: 'Username is required',\n          },\n          is: [/([a-zA-Z0-9])+/],\n          len: {\n            args: [3],\n            msg: 'Username should be more than two characters',\n          }\n        }\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: {\n          args: true,\n          msg: 'A user with this email exists',\n        },\n        validate: {\n          notEmpty: {\n            args: true,\n            msg: 'Email field cannot be empty',\n          },\n          isEmail: {\n            msg: 'Invalid email, Enter a valid email, like so: you@mail.com'\n          }\n        }\n      },\n      password: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: {\n            args: true,\n            msg: 'Password is required',\n          },\n          len: {\n            args: [8],\n            msg: 'Password should not be less than 8 characters',\n          }\n        }\n      },\n      isAdmin: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n    },\n    {\n      hooks: {\n        beforeCreate: (userData) => {\n          userData.password = bcrypt.hashSync(userData.password, 10);\n        }\n      }\n    }\n  );\n  user.associate = (models) => {\n    user.hasMany(models.event, {\n      foreignKey: 'userId',\n      onDelete: 'CASCADE',\n    });\n  };\n  return user;\n};\n\nexport default userModel;\n"]}