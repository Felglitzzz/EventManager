{"version":3,"sources":["../../server/models/center.js"],"names":["sequelize","DataTypes","center","define","name","type","STRING","allowNull","unique","args","msg","validate","notEmpty","is","len","location","capacity","INTEGER","isInt","price","facilities","ARRAY","TEXT","description","image","associate","models","hasMany","event","foreignKey"],"mappings":";;;;;;kBAAe,UAACA,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,SAASF,UAAUG,MAAV,CAAiB,QAAjB,EAA2B;AACxCC,UAAM;AACJC,YAAMJ,UAAUK,MADZ;AAEJC,iBAAW,KAFP;AAGJC,cAAQ;AACNC,cAAM,IADA;AAENC,aAAK;AAFC,OAHJ;AAOJC,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,gBADJ;AAEFC,eAAK;AAFH,SALI;AASRI,aAAK;AACHL,gBAAM,CAAC,CAAD,CADH;AAEHC,eAAK;AAFF;AATG;AAPN,KADkC;AAuBxCK,cAAU;AACRV,YAAMJ,UAAUK,MADR;AAERC,iBAAW,KAFH;AAGRI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,gBADJ;AAEFC,eAAK;AAFH,SALI;AASRI,aAAK;AACHL,gBAAM,CAAC,CAAD,CADH;AAEHC,eAAK;AAFF;AATG;AAHF,KAvB8B;AAyCxCM,cAAU;AACRX,YAAMJ,UAAUgB,OADR;AAERV,iBAAW,KAFH;AAGRK,gBAAU;AACRH,cAAM,IADE;AAERC,aAAK;AAFG,OAHF;AAORQ,aAAO;AACLT,cAAM,IADD;AAELC,aAAK;AAFA;AAPC,KAzC8B;AAqDxCS,WAAO;AACLd,YAAMJ,UAAUgB,OADX;AAELV,iBAAW,KAFN;AAGLK,gBAAU;AACRH,cAAM,IADE;AAERC,aAAK;AAFG,OAHL;AAOLQ,aAAO;AACLT,cAAM,IADD;AAELC,aAAK;AAFA;AAPF,KArDiC;AAiExCU,gBAAY;AACVf,YAAMJ,UAAUoB,KAAV,CAAgBpB,UAAUqB,IAA1B,CADI;AAEVf,iBAAW;AAFD,KAjE4B;AAqExCF,UAAM;AACJA,YAAMJ,UAAUK,MADZ;AAEJC,iBAAW;AAFP,KArEkC;AAyExCgB,iBAAa;AACXlB,YAAMJ,UAAUqB,IADL;AAEXf,iBAAW,KAFA;AAGXI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,gBADJ;AAEFC,eAAK;AAFH;AALI;AAHC,KAzE2B;AAuFxCc,WAAO;AACLnB,YAAMJ,UAAUK,MADX;AAELC,iBAAW,KAFN;AAGLI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,OADJ;AAEFC,eAAK;AAFH;AALI;AAHL;AAvFiC,GAA3B,CAAf;;AAuGAR,SAAOuB,SAAP,GAAmB,UAACC,MAAD,EAAY;AAC7BxB,WAAOyB,OAAP,CAAeD,OAAOE,KAAtB,EAA6B;AAC3BC,kBAAY;AADe,KAA7B;AAGD,GAJD;AAKA,SAAO3B,MAAP;AACD,C","file":"center.js","sourcesContent":["export default (sequelize, DataTypes) => {\n  const center = sequelize.define('center', {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: {\n        args: true,\n        msg: 'A center with this name exist',\n      },\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Name Field Required!',\n        },\n        is: {\n          args: /([a-zA-Z0-9])+/,\n          msg: 'Name can contain only alphabets and numbers',\n        },\n        len: {\n          args: [3],\n          msg: 'Name should be longer than 3 characters',\n        },\n      },\n    },\n    location: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Location Field Required!',\n        },\n        is: {\n          args: /([a-zA-Z0-9])+/,\n          msg: 'Location can contain alphabets and numbers',\n        },\n        len: {\n          args: [3],\n          msg: 'Name should be longer than 3 words',\n        },\n      },\n    },\n    capacity: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      notEmpty: {\n        args: true,\n        msg: 'Capacity Field Required!',\n      },\n      isInt: {\n        args: true,\n        msg: 'Capacity should contain only numbers',\n      },\n    },\n    price: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      notEmpty: {\n        args: true,\n        msg: 'Price Field Required!',\n      },\n      isInt: {\n        args: true,\n        msg: 'Price should contain only Numbers',\n      },\n    },\n    facilities: {\n      type: DataTypes.ARRAY(DataTypes.TEXT),\n      allowNull: false,\n    },\n    type: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    description: {\n      type: DataTypes.TEXT,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Description Field Required!',\n        },\n        is: {\n          args: /([a-zA-Z0-9])+/,\n          msg: 'Name can contain only alphabets and numbers',\n        },\n      },\n    },\n    image: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Image field is required'\n        },\n        is: {\n          args: /(\\w)/i,\n          msg: 'Image url can only contain strings'\n        }\n      }\n    },\n  });\n\n  center.associate = (models) => {\n    center.hasMany(models.event, {\n      foreignKey: 'centerId',\n    });\n  };\n  return center;\n};\n"]}