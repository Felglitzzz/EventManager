{"version":3,"sources":["../../server/models/event.js"],"names":["sequelize","DataTypes","event","define","name","type","STRING","allowNull","unique","args","msg","validate","notEmpty","is","image","date","DATEONLY","time","description","TEXT","userId","INTEGER","centerId","associate","models","belongsTo","center","foreignKey","onDelete","user"],"mappings":";;;;;;kBAAe,UAACA,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACtCC,UAAM;AACJC,YAAMJ,UAAUK,MADZ;AAEJC,iBAAW,KAFP;AAGJC,cAAQ;AACNC,cAAM,IADA;AAENC,aAAK;AAFC,OAHJ;AAOJC,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,gBADJ;AAEFC,eAAK;AAFH;AALI;AAPN,KADgC;AAmBtCI,WAAO;AACLT,YAAMJ,UAAUK,MADX;AAELC,iBAAW,KAFN;AAGLI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,OADJ;AAEFC,eAAK;AAFH;AALI;AAHL,KAnB+B;AAiCtCK,UAAM;AACJV,YAAMJ,UAAUe,QADZ;AAEJT,iBAAW,KAFP;AAGJI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG;AADF;AAHN,KAjCgC;AA2CtCO,UAAM;AACJZ,YAAMJ,UAAUK,MADZ;AAEJC,iBAAW,KAFP;AAGJI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG;AADF;AAHN,KA3CgC;AAqDtCQ,iBAAa;AACXb,YAAMJ,UAAUkB,IADL;AAEXZ,iBAAW,KAFA;AAGXI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG,SADF;AAKRG,YAAI;AACFJ,gBAAM,gBADJ;AAEFC,eAAK;AAFH;AALI;AAHC,KArDyB;AAmEtCU,YAAQ;AACNf,YAAMJ,UAAUoB,OADV;AAENd,iBAAW,KAFL;AAGNI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG;AADF;AAHJ,KAnE8B;AA6EtCY,cAAU;AACRjB,YAAMJ,UAAUoB,OADR;AAERd,iBAAW,KAFH;AAGRI,gBAAU;AACRC,kBAAU;AACRH,gBAAM,IADE;AAERC,eAAK;AAFG;AADF;AAHF;AA7E4B,GAA1B,CAAd;AAwFAR,QAAMqB,SAAN,GAAkB,UAACC,MAAD,EAAY;AAC5BtB,UAAMuB,SAAN,CAAgBD,OAAOE,MAAvB,EAA+B;AAC7BC,kBAAY,UADiB;AAE7BC,gBAAU;AAFmB,KAA/B;AAIA1B,UAAMuB,SAAN,CAAgBD,OAAOK,IAAvB,EAA6B;AAC3BF,kBAAY;AADe,KAA7B;AAGD,GARD;AASA,SAAOzB,KAAP;AACD,C","file":"event.js","sourcesContent":["export default (sequelize, DataTypes) => {\n  const event = sequelize.define('event', {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: {\n        args: true,\n        msg: 'A center with this name exist',\n      },\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Name is Required!',\n        },\n        is: {\n          args: /([a-zA-Z0-9])+/,\n          msg: 'Name can contain only alphabets and numbers',\n        },\n      },\n    },\n    image: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Image is Required'\n        },\n        is: {\n          args: /(\\w)/i,\n          msg: 'Image url can only contain strings'\n        }\n      }\n    },\n    date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Date is Required',\n        },\n      },\n    },\n    time: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Time is Required!'\n        },\n      },\n    },\n    description: {\n      type: DataTypes.TEXT,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Description Field Required!',\n        },\n        is: {\n          args: /([a-zA-Z0-9])+/,\n          msg: 'Name can contain only alphabets and numbers',\n        },\n      },\n    },\n    userId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'UserId Field Required!',\n        },\n      },\n    },\n    centerId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          args: true,\n          msg: 'Center is Required!',\n        },\n      },\n    },\n  });\n  event.associate = (models) => {\n    event.belongsTo(models.center, {\n      foreignKey: 'centerId',\n      onDelete: 'CASCADE',\n    });\n    event.belongsTo(models.user, {\n      foreignKey: 'userId',\n    });\n  };\n  return event;\n};\n"]}